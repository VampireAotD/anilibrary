services:
  database:
    build: &database
      context: docker/mysql
    container_name: anilibrary-database
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_AUTHENTICATION_PLUGIN: caching_sha2_password
    healthcheck:
      test: [ "CMD", "mysqladmin", "-u$DB_USER", "-p$DB_PASSWORD",  "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/mysql:rw
    ports:
      - ${DB_PORT}:3306
    networks:
      - local

  testing-database:
    build: *database
    container_name: anilibrary-testing-database
    environment:
      MYSQL_DATABASE: anilibrary-testing
      MYSQL_USER: testing
      MYSQL_PASSWORD: testing
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
    tmpfs:
      - /var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - local

  redis:
    image: redis:latest
    container_name: anilibrary-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a $REDIS_PASSWORD ping | grep PONG" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis-data:/data
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - local

  nginx:
    depends_on:
      app:
        condition: service_healthy
    build:
      context: docker/nginx
    container_name: anilibrary-nginx
    environment:
      NGINX_LOGS_TO_LOGSTASH: ${NGINX_LOGS_TO_LOGSTASH}
    volumes:
      - ./src/public:/anilibrary/public
    ports:
      - ${SERVER_PORT}:80
    networks:
      - local
      - anilibrary

  app:
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    build: &app
      context: docker/php
    container_name: anilibrary
    environment:
      XDEBUG_MODE: ${XDEBUG_MODE}
    extra_hosts:
      - "host.docker.internal:host-gateway" # for xdebug
    healthcheck:
      test: php artisan octane:status || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./src:/anilibrary
      - ./docker/php/supervisor/conf.d/octane.conf:/etc/supervisor/conf.d/octane.conf
    ports:
      - ${NODE_PORT}:5173
    networks:
      - local
      - anilibrary

  horizon:
    depends_on:
      app:
        condition: service_healthy
    build: *app
    container_name: anilibrary-horizon
    healthcheck:
      test: php artisan horizon:status || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./src:/anilibrary
      - ./docker/php/supervisor/conf.d/horizon.conf:/etc/supervisor/conf.d/horizon.conf
    networks:
      - local

  scheduler:
    depends_on:
      app:
        condition: service_healthy
    build: *app
    container_name: anilibrary-scheduler
    healthcheck:
      test: php artisan schedule:list || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./src:/anilibrary
      - ./docker/php/supervisor/conf.d/scheduler.conf:/etc/supervisor/conf.d/scheduler.conf
    networks:
      - local

  telegram:
    depends_on:
      app:
        condition: service_healthy
    build: *app
    container_name: anilibrary-telegram
    healthcheck:
      test: php artisan nutgram:list || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./src:/anilibrary
      - ./docker/php/supervisor/conf.d/telegram.conf:/etc/supervisor/conf.d/telegram.conf
    networks:
      - local

  reverb:
    depends_on:
      app:
        condition: service_healthy
    build: *app
    container_name: anilibrary-reverb
    volumes:
      - ./src:/anilibrary
      - ./docker/php/supervisor/conf.d/reverb.conf:/etc/supervisor/conf.d/reverb.conf
    networks:
      - local

networks:
  anilibrary:
    name: anilibrary
  local:
    name: anilibrary-local

volumes:
  db-data:
    name: anilibrary-db-data
  redis-data:
    name: anilibrary-redis-data
